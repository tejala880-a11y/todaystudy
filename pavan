<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Pavan Love Chat</title>
  <style>
    :root {
      --pink-bg: #ffe0f0;
      --pink-dark: #ff8fb6;
      --pink-mid: #ffb3cf;
      --text: #333;
    }
    html, body {
      margin: 0;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji";
      background: var(--pink-bg);
      color: var(--text);
      height: 100%;
      min-height: 100vh;
    }
    .app { max-width: 720px; margin: 0 auto; padding: 16px; }
    .card {
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 6px 20px rgba(0,0,0,0.08);
      overflow: hidden;
      position: relative;
    }
    .header {
      background: linear-gradient(135deg, var(--pink-dark), var(--pink-mid));
      color: #fff;
      padding: 16px 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .title { margin: 0; font-size: 20px; font-weight: 700; }
    .status { font-size: 12px; opacity: 0.95; }
    .content {
      display: flex;
      flex-direction: column;
      height: 70vh;
      min-height: 400px;
    }
    .chat-window {
      flex: 1; overflow-y: auto; padding: 12px;
      background: #fff6fb;
      position: relative;
    }
    .system {
      text-align: center; color: #666; font-size: 13px;
      margin: 8px 0 12px;
    }
    .msg {
      display: flex; gap: 8px; margin: 8px 0;
      align-items: flex-start;
      opacity: 0; transform: translateY(12px) scale(0.96);
      animation: chatIn 0.28s cubic-bezier(.53,1.73,.79,.67) forwards;
    }
    @keyframes chatIn {
      to { opacity: 1; transform: translateY(0) scale(1);}
    }
    .bubble {
      background: #fff;
      border: 2px solid #ffd3eb;
      border-radius: 12px;
      padding: 8px 12px;
      max-width: 70%;
      word-wrap: break-word;
      box-shadow: 0 2px 8px rgba(255, 143, 182, 0.13);
      position: relative;
      transition: border-color .2s;
    }
    .me .bubble {
      background: #ffe4f0;
      margin-left: auto;
      border-color: #ffbeda;
    }
    .meta {
      font-size: 11px; margin-bottom: 2px;
      display: flex; gap: 6px; align-items: baseline;
    }
    .sender { font-weight: 700;}
    .time { color: #a87a8f; font-weight: 500; }
    .inputbar {
      display: flex; gap: 8px; padding: 10px;
      border-top: 1px solid #ffd4e8; background: #fff0f7;
    }
    .inputbar input[type="text"] {
      flex: 1; padding: 10px 12px;
      border-radius: 10px; border: 1px solid #ffbdd9;
      outline: none; font-size: 14px; background: #fff;
    }
    .btn {
      background: var(--pink-dark); color: #fff;
      border: none; padding: 10px 14px;
      border-radius: 10px; font-weight: 700; cursor: pointer;
    }
    .btn:disabled { opacity: 0.6; cursor: not-allowed;}
    .namebar {
      padding: 10px; border-bottom: 1px solid #ffd4e8;
      background: #fff9fc; display: flex; gap: 8px;
      align-items: center;
    }
    .namebar input {
      flex: 1; padding: 8px 10px; border-radius: 10px;
      border: 1px solid #ffbdd9; outline: none; font-size: 14px; background: #fff;
    }
    .note { font-size: 12px; color: #7b5064; margin-left: auto;}
    .footer { text-align: center; font-size: 12px; color: #775; margin-top: 10px; }
    .hidden { display: none;}
    /* Emoji burst */
    .burst-container {
      pointer-events: none;
      position: absolute;
      inset: 0; z-index: 10;
      overflow: visible;
    }
    .emoji {
      position: absolute;
      font-size: 20px; opacity: 0;
      transform: translate(-50%, 12px) scale(0.85) rotate(0deg);
      animation: floatUp 1.8s ease-out forwards;
      text-shadow: 0 2px 6px rgba(255,0,90,0.30);
    }
    @keyframes floatUp {
      0% { opacity: 0; transform: translate(-50%, 24px) scale(0.85);}
      12% { opacity: 1;}
      75% { opacity:1;}
      100% { opacity: 0; transform: translate(-50%, -92px) scale(1.15) rotate(15deg);}
    }
  </style>
</head>
<body>
  <div class="app">
    <div class="card">
      <div class="header">
        <h1 class="title">Pavan Love Chat</h1>
        <div class="status" id="status">Connecting‚Ä¶</div>
      </div>
      <div class="content">
        <div class="namebar" id="nameBar">
          <input id="displayNameInput" type="text" maxlength="24" placeholder="Choose a display name (e.g., PinkDaisy)" />
          <button class="btn" id="saveNameBtn">Join</button>
          <span class="note">No login ‚Äî anonymous</span>
        </div>
        <div class="chat-window" id="chatWindow" aria-live="polite">
          <div class="system" id="systemMsg">Welcome! Be kind. Messages are public to anyone in the room.</div>
          <ul id="messages" style="list-style:none; padding:0; margin:0;"></ul>
          <div class="burst-container" id="burstLayer"></div>
        </div>
        <form class="inputbar" id="messageForm" autocomplete="off">
          <input id="messageInput" type="text" placeholder="Type a message‚Ä¶" disabled />
          <button class="btn" id="sendBtn" type="submit" disabled>Send</button>
        </form>
      </div>
    </div>
    <div class="footer">
      Anonymous group chat demo using Firebase Authentication (anonymous) and Firestore.
    </div>
  </div>
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
    import { getAuth, onAuthStateChanged, signInAnonymously, updateProfile } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
    import { getFirestore, collection, addDoc, serverTimestamp, query, orderBy, onSnapshot, limit } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

    // Firebase config (use your values!)
    const firebaseConfig = {
      apiKey: "AIzaSyC8zXcbDNwdm2LMbpzV1KkN3wiTyh_vZ3M",
      authDomain: "o-study-f5081.firebaseapp.com",
      projectId: "o-study-f5081",
      storageBucket: "o-study-f5081.firebasestorage.app",
      messagingSenderId: "338420264881",
      appId: "1:338420264881:web:c4119859174ab264709790",
      measurementId: "G-8HCPGJ13MH"
    };
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    const statusEl = document.getElementById("status");
    const nameBar = document.getElementById("nameBar");
    const displayNameInput = document.getElementById("displayNameInput");
    const saveNameBtn = document.getElementById("saveNameBtn");
    const messageForm = document.getElementById("messageForm");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");
    const messagesUL = document.getElementById("messages");
    const chatWindow = document.getElementById("chatWindow");
    const burstLayer = document.getElementById("burstLayer");

    let currentUser = null;
    let displayName = localStorage.getItem("pavan_display_name") || "";
    // Nice, readable palette for users
    const palette = [
      "#ff4f7b", "#ff8a5b", "#cb6ce6", "#7cbc5b", "#29bfbf", "#6f8cff", "#a06bff",
      "#e85dff", "#ff5fad", "#ff6f91", "#00bfa5", "#8bc34a", "#ff7043", "#42a5f5", "#ab47bc"
    ];
    function uidToColor(uid = "") {
      let h = 0;
      for (let i = 0; i < uid.length; i++) h = (h*31+uid.charCodeAt(i))>>>0;
      return palette[h%palette.length];
    }
    function fmt(ts) {
      try {
        const d = ts instanceof Date ? ts : new Date(ts);
        return d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
      } catch { return ""; }
    }
    // Love emojis!
    const loveEmojis = ["‚ù§Ô∏è","üíñ","üíó","üíû","üíï","üíì","üíò","üíù","üòç","üòò"];
    function loveBurst(originX = null, originY = null) {
      const rect = chatWindow.getBoundingClientRect();
      const baseX = originX ?? (rect.width-80);
      const baseY = originY ?? (rect.height-24);
      const count = 6 + Math.floor(Math.random()*4);
      for(let i=0;i<count;i++) {
        const span = document.createElement("span");
        span.className="emoji";
        span.textContent = loveEmojis[Math.floor(Math.random()*loveEmojis.length)];
        const offsetX=(Math.random()-0.5)*120;
        const delay= Math.random()*120;
        const scale= 0.8+Math.random()*0.8;
        const duration=1400+Math.random()*700;
        span.style.left= `${baseX+offsetX}px`;
        span.style.bottom= `${Math.max(16,baseY)}px`;
        span.style.fontSize= `${20*scale}px`;
        span.style.animationDuration= `${duration}ms`;
        span.style.animationDelay= `${delay}ms`;
        burstLayer.appendChild(span);
        setTimeout(()=>span.remove(), duration+delay+80);
      }
    }
    function renderMessage(doc,uid) {
      const data=doc.data();
      const li=document.createElement("li");
      li.className="msg"+(data.uid===uid?" me":"");
      const bubble=document.createElement("div");
      bubble.className="bubble";
      const meta=document.createElement("div");
      meta.className="meta";
      const sender=document.createElement("span");
      sender.className="sender";
      sender.textContent=data.name||"Anonymous";
      // User color magic
      const color=uidToColor(data.uid||"");
      sender.style.color=color;
      if(data.uid!==uid){
        bubble.style.borderColor=color+"77";
        bubble.style.boxShadow = `0 2px 8px ${color}22`;
      }
      const time=document.createElement("span");
      time.className="time";
      const t=data.createdAt?.toDate?data.createdAt.toDate():new Date();
      time.textContent=fmt(t);
      meta.appendChild(sender);
      meta.appendChild(time);

      const text=document.createElement("div");
      text.textContent=data.text||"";
      bubble.appendChild(meta);
      bubble.appendChild(text);
      li.appendChild(bubble);
      // Brief colored border pulse for other users' messages
      if(data.uid!==uid){
        bubble.animate(
          [
            { boxShadow: `0 0 0 0 ${color}44` },
            { boxShadow: `0 0 0 10px ${color}00` }
          ],{duration:450,easing:"ease-out"}
        );
      }
      return li;
    }
    function scrollToBottom() {
      chatWindow.scrollTop=chatWindow.scrollHeight;
    }
    function setReady(ready) {
      messageInput.disabled=!ready;
      sendBtn.disabled=!ready;
    }
    async function ensureAuth() {
      statusEl.textContent = "Connecting‚Ä¶";
      try{ await signInAnonymously(auth); }
      catch(e){ console.error(e); statusEl.textContent="Auth error. Reload page."; }
    }
    async function persistDisplayName(name) {
      localStorage.setItem("pavan_display_name",name);
      if(auth.currentUser){
        try{ await updateProfile(auth.currentUser, { displayName: name }); }
        catch(e){/* ignore */};
      }
    }
    saveNameBtn.addEventListener("click", async ()=>{
      const val=displayNameInput.value.trim().slice(0,24);
      if(!val)return;
      displayName=val;
      await persistDisplayName(displayName);
      nameBar.classList.add("hidden");
      setReady(true);
      messageInput.focus();
      loveBurst();
    });
    messageForm.addEventListener("submit",async (e)=>{
      e.preventDefault();
      const text=messageInput.value.trim();
      if(!text||!currentUser)return;
      sendBtn.disabled=true;
      try{
        await addDoc(collection(db,"rooms","global","messages"),{
          text, uid:currentUser.uid, name:displayName||"Anonymous", createdAt:serverTimestamp()
        });
        messageInput.value="";
        loveBurst();
      }catch(err){console.error(err);}
      finally{
        sendBtn.disabled=false;
        messageInput.focus();
      }
    });
    onAuthStateChanged(auth, async (user)=>{
      if(user){
        currentUser=user;
        statusEl.textContent="Online";
        if(displayName){
          await persistDisplayName(displayName);
          nameBar.classList.add("hidden");
          setReady(true);
        } else {
          nameBar.classList.remove("hidden");
          setReady(false);
        }
        const q=query(collection(db,"rooms","global","messages"),orderBy("createdAt","asc"),limit(200));
        onSnapshot(q, (snap)=>{
          const isNearBottom=chatWindow.scrollTop+chatWindow.clientHeight>=chatWindow.scrollHeight-60;
          messagesUL.innerHTML="";
          snap.forEach((doc)=>{
            const isMine=doc.data().uid===currentUser?.uid;
            const li=renderMessage(doc, currentUser?.uid);
            li.dataset.id=doc.id;
            messagesUL.appendChild(li);
            // If not mine, burst on arrival
            if(!isMine) loveBurst(84+Math.random()*160, 40+Math.random()*80);
          });
          if(isNearBottom) scrollToBottom();
        });
      } else {
        statusEl.textContent="Offline";
        setReady(false);
      }
    });
    displayNameInput.value=displayName;
    ensureAuth();
  </script>
  <!--
  Firestore Rules (starter ‚Äì tighten as needed):
  rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {
      match /rooms/{roomId}/messages/{msgId} {
        allow read, write: if request.auth != null;
      }
    }
  }
  -->
</body>
</html>
